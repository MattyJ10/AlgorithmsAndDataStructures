package stringsAndArrays;

import java.util.*;

public class StringProblems {
	
	/*	
	 * 	CTCI PROBLEM 1.1: Is Unique

	 *  	Solution Runtime: O(n) time and space
	 *  	Alternative: sort string first then search for duplicates (uses no extra space). 
	 *  
	 *  	CTCI Solution/Notes: If the string is > 128 in length (ascii characters) then it's false
	 */
	public static boolean isUniqueChars(String input) {

		HashSet<Character> chars = new HashSet<Character>();
		for (int i = 0; i < input.length(); i++) {
			char current = input.charAt(i); 
			if (chars.contains(current)) {
				return false; 
			} else {
				chars.add(current);
			}
		}
		return true;
	}
	
	/*
	 * 	CTCI PROBLEM 1.2: Check Permutation

	 * 		Solution Runtime: O(n) time and space
	 * 		Alternative: Sort both strings and check if they are equal --> nlog(n) run time but O(1) space
	 * 
	 * 		CTCI Solution/Notes: Check for case sensitivity, ask about whitespace, solutions are the same
	 */
	public static boolean isPerm(String s1, String s2) {
		if (s1.length() != s2.length()) 
			return false;
		
		HashSet<Character> chars = new HashSet<Character>(); 

		for (int i = 0; i < s1.length(); i++) {
			char current = s1.charAt(i);
			if (chars.contains(current)) 
				chars.remove(current);
			else 
				chars.add(current);
			current = s2.charAt(i);
			if (chars.contains(current)) 
				chars.remove(current);
			else 
				chars.add(current);
		}
		return chars.isEmpty(); 

	}
	
	/*
	 * 	CTCI Problem 1.3: URLify
	 * 		Complexity: O(N) time constant space
	 */
	public static void URLify(char[] str, int trueLength) {
		int spaceCount = 0; 
		for (int i = 0; i < trueLength; i++) {
			if (str[i] == ' ') {
				spaceCount++;
			}
		}
		if (spaceCount == 0)
			return;
		int index = trueLength + spaceCount * 2;  
		for (int i = trueLength - 1; i >= 0; i--) {
			if (str[i] == ' ') {
				str[index - 1] = '0';
				str[index - 2] = '2';
				str[index - 3] = '%';
				index = index - 3;
			} else {
				str[index - 1] = str[i]; 
				index--; 
			}
		}
	}
	
	public static boolean isPalPerm(String s) {
		if (s.length() == 1 || s.length() == 0) {
			return true; 
		}
		HashSet<Character> chars = new HashSet<Character>(); 
		for (int i = 0; i < s.length(); i++) {
			char current = s.charAt(i); 
			if (chars.contains(current))
				chars.remove(current); 
			else 
				chars.add(current); 
		}
		return chars.size() <= 1;
	}
	
	/*
	 * 	Interview Cake Problem 1.2: Reverse String
	 * 		Complexity: O(N/2) time O(1) space
	 */
	public static void reverseString(char[] str) {
		int i = 0; 
		int j = str.length - 1; 
		
		while(i < j) {
			char temp = str[i];
			str[i] = str[j];
			str[j] = temp; 
			i++;
			j--;
		}
	}
	
	/*
	 * 	Interview Cake Problem 1.3: Reverse Words
	 * 		Complexity: O(N + N^2)
	 * 		
	 */
	public static void reverseSentence(char[] sentence) {
		reverseString(sentence);
		
		for (int i = 0; i < sentence.length; i++) {
			if (sentence[i] == ' ')
				continue;
			int j = i + 1; 
			while (j < sentence.length && sentence[j] != ' ') {
				j++;
			}
			int k = j-1; 
			while (i < k) {
				char temp = sentence[i];
				sentence[i] = sentence[k];
				sentence[k] = temp; 
				i++;
				k--;
			}
			i = j; 
		}

	}
	
	public static void main(String[] args) {
		
		String test = "test"; 
		System.out.println(isPalPerm(test)); 
		 
	}

}
