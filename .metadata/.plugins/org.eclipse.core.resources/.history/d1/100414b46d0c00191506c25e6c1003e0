package Graph;

import java.util.ArrayList;

public class WeightedGraph {
	
	public class WeightedGraphNode {
		
		int data; 
		ArrayList<Edge> edges = new ArrayList<Edge>();
		boolean visited; 
		
		WeightedGraphNode(int data) {
			this.data = data; 
			this.visited = false; 
			
		}
		
	}
	
	public class Edge {
		
		int weight; 
		WeightedGraphNode start;
		WeightedGraphNode end; 
		
		public Edge(int weight, WeightedGraphNode start, WeightedGraphNode end) {
			this.weight = weight; 
			this.start = start;
			this.end = end; 
		}
		
	}
	
	public class ValueAndPrev {
		
		int pathLength;
		WeightedGraphNode prevNode; 
		
		
		ValueAndPrev(int length, WeightedGraphNode prev) {
			this.pathLength = length; 
			this.prevNode = prev;
		}
		
	}
	
	ValueAndPrev[] shortestPathsFromStart; 
	WeightedGraphNode[] nodes; 
	int size; 
	int startIndex; 
	
	public WeightedGraph(int size) {
		this.nodes = new WeightedGraphNode[size]; 
		this.size = 0;
		this.shortestPathsFromStart = new int[size]; 
		for (int i = 0; i < this.shortestPathsFromStart.length; i++) {
			this.shortestPathsFromStart[i].pathLength = Integer.MAX_VALUE; 
		}
	}
	
	public void addNode(int value) {
		if (size >= nodes.length - 1) {
			System.out.println("no space in graph"); 
			return;
		}
		this.nodes[size] = new WeightedGraphNode(value); 
		size++; 
	}
	
	public void addEdge(int start, int end, int weight) {
		int startIndex = findIndex(start); 
		int endIndex = findIndex(end); 
		if (startIndex != -1 && endIndex != -1) {
			Edge e1 = new Edge(weight, nodes[startIndex], nodes[endIndex]);
			Edge e2 = new Edge(weight, nodes[endIndex], nodes[startIndex]); 
			nodes[startIndex].edges.add(e1); 
			nodes[endIndex].edges.add(e2); 
		} else {
			System.out.println("Could not add edge, one of the values doesn't exist"); 
		}
	}
	
	public int findIndex(int value) {
		for (int i = 0; i < size; i++) {
			if (nodes[i].data == value) {
				return i; 
			}
		}
		return -1; 
	}
	
	public void dijkstras(WeightedGraphNode start) {
		this.startIndex = findIndex(start.data); 
		if (this.startIndex != -1) {
			for (int i = 0; i < this.nodes.length; i++) {
				this.nodes[i].visited = false; 
			}
			this.shortestPathsFromStart[startIndex].pathLength = 0; 
			this.shortestPathsFromStart[startIndex].prevNode = start; 
			WeightedGraphNode currentNode = start; 
			QueueProblems.Queue<WeightedGraphNode> queue = new QueueProblems.Queue<WeightedGraphNode>(); 
			queue.add(currentNode);
			while(!queue.isEmpty()) {
				//do something to all queued nodes
				currentNode = queue.remove(); 
				int currentIndex = findIndex(currentNode.data); 
				currentNode.visited = true; 
				//for each neighbor
				for (int i = 0; i < currentNode.edges.size(); i++) {
					//determine the weight of the path plus the current path length;
					int nextIndex = findIndex(currentNode.edges.get(i).end.data);
					int totalWeight = this.shortestPathsFromStart[currentIndex].pathLength + currentNode.edges.get(i).weight; 
					//if weight of the path is < current value in array, update it
					if (totalWeight < this.shortestPathsFromStart[nextIndex].pathLength) {
						this.shortestPathsFromStart[nextIndex].pathLength = totalWeight; 
						this.shortestPathsFromStart[nextIndex].prevNode = currentNode; 
					}
				}
				//determine next node to visit
				
				//enqueue all of the next nodes neighbors
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
